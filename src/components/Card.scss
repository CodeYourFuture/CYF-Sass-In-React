@import "../theme/utilities.scss";

// notice how we only deal with the inside of the card
// its placement on the page is not mentioned
// the inside of the component and the outside of the component don't know anything about each other
// the inside of this component does not know how big it is

.c-card {
  @include grid-assign(picture, heading, summary, action);
  display: grid;
  grid-template-columns: 0 1fr 0;
  gap: var(--theme-spacing--1) var(--theme-spacing--2);
  grid-template-areas:
    "picture picture picture"
    ". heading ."
    ". summary ."
    ". action .";
  grid-template-rows: min-content auto 1fr min-content;

  // on a real production site, colour rules like this might be controlled by helper classes
  // and taken out of this component
  // so all you would see are positioning/layout rules
  // why don't you try refactoring to make that happen
  background-color: var(--theme-color-paper);
  box-shadow: var(--theme-spacing--1) var(--theme-spacing--2) 0
    var(--theme-color-accent);
  height: 100%;

  // now let's handle the elements inside this component

  &__heading {
    font-size: var(--theme-type-size--4);
    //could you use a utility class for the above type instead? Look in type.scss
    margin: 0 0 auto 0;
  }

  &__summary {
    margin: 0 0 var(--theme-type-size--6) 0;
  }
  &__picture {
    height: fit-content; // this creates a gradient stripe border - can you think why?
    @include gradient;
  }
  &__image {
    mix-blend-mode: luminosity;
  }
}
